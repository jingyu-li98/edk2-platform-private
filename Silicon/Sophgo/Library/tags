!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ASSERT_INVALID_PCI_SEGMENT_ADDRESS	PciSegmentLib/PciSegmentLib.c	47;"	d	file:
AcpiDevicePath	PciHostBridgeLib/PciHostBridgeLib.c	/^  ACPI_HID_DEVICE_PATH     AcpiDevicePath;$/;"	m	struct:__anon1	file:
BYTE_NUM_PER_MSI_VEC	Sg2042PcieLib/PcieInit.c	22;"	d	file:
CDNS_PCIE_CFG_MANGO_APB	Sg2042PcieLib/PcieInit.c	25;"	d	file:
CDNS_PCIE_IRS_REG0400	Sg2042PcieLib/PcieInit.c	26;"	d	file:
CDNS_PCIE_IRS_REG0404	Sg2042PcieLib/PcieInit.c	27;"	d	file:
CDNS_PCIE_IRS_REG0418	Sg2042PcieLib/PcieInit.c	28;"	d	file:
CDNS_PCIE_IRS_REG041C	Sg2042PcieLib/PcieInit.c	29;"	d	file:
CDNS_PCIE_IRS_REG0804	Sg2042PcieLib/PcieInit.c	30;"	d	file:
CDNS_PCIE_IRS_REG0804_CLR_LINK0_MSI_IN_BIT	Sg2042PcieLib/PcieInit.c	39;"	d	file:
CDNS_PCIE_IRS_REG0804_CLR_LINK1_MSI_IN_BIT	Sg2042PcieLib/PcieInit.c	40;"	d	file:
CDNS_PCIE_IRS_REG080C	Sg2042PcieLib/PcieInit.c	31;"	d	file:
CDNS_PCIE_IRS_REG0810	Sg2042PcieLib/PcieInit.c	32;"	d	file:
CDNS_PCIE_IRS_REG0810_ST_LINK0_MSI_IN_BIT	Sg2042PcieLib/PcieInit.c	41;"	d	file:
CDNS_PCIE_IRS_REG0810_ST_LINK1_MSI_IN_BIT	Sg2042PcieLib/PcieInit.c	42;"	d	file:
CDNS_PCIE_IRS_REG085C	Sg2042PcieLib/PcieInit.c	33;"	d	file:
CDNS_PCIE_IRS_REG0860	Sg2042PcieLib/PcieInit.c	34;"	d	file:
CDNS_PCIE_IRS_REG0864	Sg2042PcieLib/PcieInit.c	35;"	d	file:
CDNS_PCIE_IRS_REG0868	Sg2042PcieLib/PcieInit.c	36;"	d	file:
CDNS_PCIE_IRS_REG086C	Sg2042PcieLib/PcieInit.c	37;"	d	file:
CDNS_PLAT_CPU_TO_BUS_ADDR	Sg2042PcieLib/PcieInit.c	44;"	d	file:
ConstructRootBridge	PciHostBridgeLib/PciHostBridgeLib.c	/^ConstructRootBridge ($/;"	f
EFI_PCI_ROOT_BRIDGE_DEVICE_PATH	PciHostBridgeLib/PciHostBridgeLib.c	/^} EFI_PCI_ROOT_BRIDGE_DEVICE_PATH;$/;"	t	typeref:struct:__anon1	file:
EndDevicePath	PciHostBridgeLib/PciHostBridgeLib.c	/^  EFI_DEVICE_PATH_PROTOCOL EndDevicePath;$/;"	m	struct:__anon1	file:
GET_BUS_NUM	PciSegmentLib/PciSegmentLib.c	21;"	d	file:
GET_DEV_NUM	PciSegmentLib/PciSegmentLib.c	22;"	d	file:
GET_FUNC_NUM	PciSegmentLib/PciSegmentLib.c	23;"	d	file:
GET_HEADER_TYPE	PciSegmentLib/PciSegmentLib.c	36;"	d	file:
GET_REG_NUM	PciSegmentLib/PciSegmentLib.c	24;"	d	file:
GET_SEG_NUM	PciSegmentLib/PciSegmentLib.c	20;"	d	file:
GetMmcfgBase	PciSegmentLib/PciSegmentLib.c	/^GetMmcfgBase ($/;"	f
HEADER_TYPE_REG	PciSegmentLib/PciSegmentLib.c	35;"	d	file:
MAX_MSI_CTRLS	Sg2042PcieLib/PcieInit.c	20;"	d	file:
MAX_MSI_IRQS	Sg2042PcieLib/PcieInit.c	18;"	d	file:
MAX_MSI_IRQS_PER_CTRL	Sg2042PcieLib/PcieInit.c	19;"	d	file:
MSI_DEF_NUM_VECTORS	Sg2042PcieLib/PcieInit.c	21;"	d	file:
MangoCcixInit	PciHostBridgeLib/PciHostBridgeLibConstructor.c	/^VOID MangoCcixInit($/;"	f
MangoCcixInit	Sg2042PcieLib/PcieCore.c	/^VOID MangoCcixInit($/;"	f
MangoPcieGetMaxPayload	PciHostBridgeLib/PciHostBridgeLibConstructor.c	/^VOID MangoPcieGetMaxPayload($/;"	f
MangoPcieGetMaxPayload	Sg2042PcieLib/PcieCore.c	/^VOID MangoPcieGetMaxPayload($/;"	f
MangoPcieInit	PciHostBridgeLib/PciHostBridgeLibConstructor.c	/^VOID MangoPcieInit($/;"	f
MangoPcieInit	Sg2042PcieLib/PcieCore.c	/^VOID MangoPcieInit($/;"	f
MangoPcieSetMaxPayload	PciHostBridgeLib/PciHostBridgeLibConstructor.c	/^VOID MangoPcieSetMaxPayload($/;"	f
MangoPcieSetMaxPayload	Sg2042PcieLib/PcieCore.c	/^VOID MangoPcieSetMaxPayload($/;"	f
MangoPcieSetMaxReadReqSize	PciHostBridgeLib/PciHostBridgeLibConstructor.c	/^VOID MangoPcieSetMaxReadReqSize($/;"	f
MangoPcieSetMaxReadReqSize	Sg2042PcieLib/PcieCore.c	/^VOID MangoPcieSetMaxReadReqSize($/;"	f
MangoPcieSlvLocationMapping	PciHostBridgeLib/PciHostBridgeLibConstructor.c	/^VOID MangoPcieSlvLocationMapping($/;"	f
MangoPcieSlvLocationMapping	Sg2042PcieLib/PcieCore.c	/^VOID MangoPcieSlvLocationMapping($/;"	f
PCIE_APB_SLAVE_BASE	PciHostBridgeLib/PciHostBridgeLibConstructor.c	/^UINT64 PCIE_APB_SLAVE_BASE[2] = {};$/;"	v
PCIE_APB_SLAVE_BASE	Sg2042PcieLib/PcieCore.c	/^UINT64 PCIE_APB_SLAVE_BASE[2] = {};$/;"	v
PCI_SEGMENT_TO_PCI_ADDRESS	PciSegmentLib/PciSegmentLib.c	55;"	d	file:
PRIMARY_BUS_NUMBER_REG	PciSegmentLib/PciSegmentLib.c	37;"	d	file:
PciHostBridgeFreeRootBridges	PciHostBridgeLib/PciHostBridgeLib.c	/^PciHostBridgeFreeRootBridges ($/;"	f
PciHostBridgeGetRootBridges	PciHostBridgeLib/PciHostBridgeLib.c	/^PciHostBridgeGetRootBridges ($/;"	f
PciHostBridgeResourceConflict	PciHostBridgeLib/PciHostBridgeLib.c	/^PciHostBridgeResourceConflict ($/;"	f
PciSegmentAnd16	PciSegmentLib/PciSegmentLib.c	/^PciSegmentAnd16 ($/;"	f
PciSegmentAnd32	PciSegmentLib/PciSegmentLib.c	/^PciSegmentAnd32 ($/;"	f
PciSegmentAnd8	PciSegmentLib/PciSegmentLib.c	/^PciSegmentAnd8 ($/;"	f
PciSegmentAndThenOr16	PciSegmentLib/PciSegmentLib.c	/^PciSegmentAndThenOr16 ($/;"	f
PciSegmentAndThenOr32	PciSegmentLib/PciSegmentLib.c	/^PciSegmentAndThenOr32 ($/;"	f
PciSegmentAndThenOr8	PciSegmentLib/PciSegmentLib.c	/^PciSegmentAndThenOr8 ($/;"	f
PciSegmentBitFieldAnd16	PciSegmentLib/PciSegmentLib.c	/^PciSegmentBitFieldAnd16 ($/;"	f
PciSegmentBitFieldAnd32	PciSegmentLib/PciSegmentLib.c	/^PciSegmentBitFieldAnd32 ($/;"	f
PciSegmentBitFieldAnd8	PciSegmentLib/PciSegmentLib.c	/^PciSegmentBitFieldAnd8 ($/;"	f
PciSegmentBitFieldAndThenOr16	PciSegmentLib/PciSegmentLib.c	/^PciSegmentBitFieldAndThenOr16 ($/;"	f
PciSegmentBitFieldAndThenOr32	PciSegmentLib/PciSegmentLib.c	/^PciSegmentBitFieldAndThenOr32 ($/;"	f
PciSegmentBitFieldAndThenOr8	PciSegmentLib/PciSegmentLib.c	/^PciSegmentBitFieldAndThenOr8 ($/;"	f
PciSegmentBitFieldOr16	PciSegmentLib/PciSegmentLib.c	/^PciSegmentBitFieldOr16 ($/;"	f
PciSegmentBitFieldOr32	PciSegmentLib/PciSegmentLib.c	/^PciSegmentBitFieldOr32 ($/;"	f
PciSegmentBitFieldOr8	PciSegmentLib/PciSegmentLib.c	/^PciSegmentBitFieldOr8 ($/;"	f
PciSegmentBitFieldRead16	PciSegmentLib/PciSegmentLib.c	/^PciSegmentBitFieldRead16 ($/;"	f
PciSegmentBitFieldRead32	PciSegmentLib/PciSegmentLib.c	/^PciSegmentBitFieldRead32 ($/;"	f
PciSegmentBitFieldRead8	PciSegmentLib/PciSegmentLib.c	/^PciSegmentBitFieldRead8 ($/;"	f
PciSegmentBitFieldWrite16	PciSegmentLib/PciSegmentLib.c	/^PciSegmentBitFieldWrite16 ($/;"	f
PciSegmentBitFieldWrite32	PciSegmentLib/PciSegmentLib.c	/^PciSegmentBitFieldWrite32 ($/;"	f
PciSegmentBitFieldWrite8	PciSegmentLib/PciSegmentLib.c	/^PciSegmentBitFieldWrite8 ($/;"	f
PciSegmentOr16	PciSegmentLib/PciSegmentLib.c	/^PciSegmentOr16 ($/;"	f
PciSegmentOr32	PciSegmentLib/PciSegmentLib.c	/^PciSegmentOr32 ($/;"	f
PciSegmentOr8	PciSegmentLib/PciSegmentLib.c	/^PciSegmentOr8 ($/;"	f
PciSegmentRead16	PciSegmentLib/PciSegmentLib.c	/^PciSegmentRead16 ($/;"	f
PciSegmentRead32	PciSegmentLib/PciSegmentLib.c	/^PciSegmentRead32 ($/;"	f
PciSegmentRead8	PciSegmentLib/PciSegmentLib.c	/^PciSegmentRead8 ($/;"	f
PciSegmentReadBuffer	PciSegmentLib/PciSegmentLib.c	/^PciSegmentReadBuffer ($/;"	f
PciSegmentRegisterForRuntimeAccess	PciSegmentLib/PciSegmentLib.c	/^PciSegmentRegisterForRuntimeAccess ($/;"	f
PciSegmentWrite16	PciSegmentLib/PciSegmentLib.c	/^PciSegmentWrite16 ($/;"	f
PciSegmentWrite32	PciSegmentLib/PciSegmentLib.c	/^PciSegmentWrite32 ($/;"	f
PciSegmentWrite8	PciSegmentLib/PciSegmentLib.c	/^PciSegmentWrite8 ($/;"	f
PciSegmentWriteBuffer	PciSegmentLib/PciSegmentLib.c	/^PciSegmentWriteBuffer ($/;"	f
PcieConfigBars	PciHostBridgeLib/PciHostBridgeLibConstructor.c	/^VOID PcieConfigBars($/;"	f
PcieConfigBars	Sg2042PcieLib/PcieCore.c	/^VOID PcieConfigBars($/;"	f
PcieConfigCtrl	PciHostBridgeLib/PciHostBridgeLibConstructor.c	/^VOID PcieConfigCtrl($/;"	f
PcieConfigCtrl	Sg2042PcieLib/PcieCore.c	/^VOID PcieConfigCtrl($/;"	f
PcieConfigEq	PciHostBridgeLib/PciHostBridgeLibConstructor.c	/^VOID PcieConfigEq($/;"	f
PcieConfigEq	Sg2042PcieLib/PcieCore.c	/^VOID PcieConfigEq($/;"	f
PcieConfigLinkWidth	PciHostBridgeLib/PciHostBridgeLibConstructor.c	/^VOID PcieConfigLinkWidth($/;"	f
PcieConfigLinkWidth	Sg2042PcieLib/PcieCore.c	/^VOID PcieConfigLinkWidth($/;"	f
PcieConfigPhy	PciHostBridgeLib/PciHostBridgeLibConstructor.c	/^VOID PcieConfigPhy($/;"	f
PcieConfigPhy	Sg2042PcieLib/PcieCore.c	/^VOID PcieConfigPhy($/;"	f
PcieInitSideBand	PciHostBridgeLib/PciHostBridgeLibConstructor.c	/^VOID PcieInitSideBand($/;"	f
PcieInitSideBand	Sg2042PcieLib/PcieCore.c	/^VOID PcieInitSideBand($/;"	f
PcieLink0Reset	PciHostBridgeLib/PciHostBridgeLibConstructor.c	/^VOID PcieLink0Reset($/;"	f
PcieLink0Reset	Sg2042PcieLib/PcieCore.c	/^VOID PcieLink0Reset($/;"	f
PcieLink1Reset	PciHostBridgeLib/PciHostBridgeLibConstructor.c	/^VOID PcieLink1Reset($/;"	f
PcieLink1Reset	Sg2042PcieLib/PcieCore.c	/^VOID PcieLink1Reset($/;"	f
PciePhyRstWaitPclk	PciHostBridgeLib/PciHostBridgeLibConstructor.c	/^VOID PciePhyRstWaitPclk($/;"	f
PciePhyRstWaitPclk	Sg2042PcieLib/PcieCore.c	/^VOID PciePhyRstWaitPclk($/;"	f
PcieSetPerst	PciHostBridgeLib/PciHostBridgeLibConstructor.c	/^VOID PcieSetPerst($/;"	f
PcieSetPerst	Sg2042PcieLib/PcieCore.c	/^VOID PcieSetPerst($/;"	f
PcieTrainLink	PciHostBridgeLib/PciHostBridgeLibConstructor.c	/^VOID PcieTrainLink($/;"	f
PcieTrainLink	Sg2042PcieLib/PcieCore.c	/^VOID PcieTrainLink($/;"	f
PcieUdmaAxiPcieMap	PciHostBridgeLib/PciHostBridgeLibConstructor.c	/^VOID PcieUdmaAxiPcieMap($/;"	f
PcieUdmaAxiPcieMap	Sg2042PcieLib/PcieCore.c	/^VOID PcieUdmaAxiPcieMap($/;"	f
PcieUdmaTest	PciHostBridgeLib/PciHostBridgeLibConstructor.c	/^VOID PcieUdmaTest($/;"	f
PcieUdmaTest	Sg2042PcieLib/PcieCore.c	/^VOID PcieUdmaTest($/;"	f
PcieWriteMsi	PciHostBridgeLib/PciHostBridgeLibConstructor.c	/^VOID PcieWriteMsi($/;"	f
PcieWriteMsi	Sg2042PcieLib/PcieCore.c	/^VOID PcieWriteMsi($/;"	f
WORD_ALIGN_MASK	PciSegmentLib/PciSegmentLib.c	26;"	d	file:
WORD_GET_BYTE	PciSegmentLib/PciSegmentLib.c	27;"	d	file:
WORD_GET_HALF_WORD	PciSegmentLib/PciSegmentLib.c	31;"	d	file:
WORD_SET_BYTE	PciSegmentLib/PciSegmentLib.c	28;"	d	file:
WORD_SET_HALF_WORD	PciSegmentLib/PciSegmentLib.c	32;"	d	file:
bar_aperture_mask	Sg2042PcieLib/pcie-cadence-host.c	/^static u8 bar_aperture_mask[] = {$/;"	v	file:
bar_max_size	Sg2042PcieLib/pcie-cadence-host.c	/^static u64 bar_max_size[] = {$/;"	v	file:
bus_range	Sg2042PcieLib/PcieInit.c	/^	struct resource		*bus_range;$/;"	m	struct:cdns_mango_pcie_rc	typeref:struct:cdns_mango_pcie_rc::resource	file:
cdns_mango_cpu_addr_fixup	Sg2042PcieLib/PcieInit.c	/^STATIC UINT64 cdns_mango_cpu_addr_fixup(struct cdns_pcie *pcie, UINT64 cpu_addr)$/;"	f
cdns_mango_ops	Sg2042PcieLib/PcieInit.c	/^STATIC const struct cdns_pcie_ops cdns_mango_ops = {$/;"	v	typeref:struct:cdns_pcie_ops
cdns_mango_pci_map_bus	Sg2042PcieLib/PcieInit.c	/^STATIC VOID __iomem *cdns_mango_pci_map_bus(struct pci_bus *bus, UINT32 devfn,$/;"	f
cdns_mango_pcie_rc	Sg2042PcieLib/PcieInit.c	/^struct cdns_mango_pcie_rc {$/;"	s	file:
cdns_pci_map_bus	Sg2042PcieLib/pcie-cadence-host.c	/^void __iomem *cdns_pci_map_bus(struct pci_bus *bus, unsigned int devfn,$/;"	f
cdns_pcie_database	Sg2042PcieLib/PcieInit.c	/^struct cdns_pcie_database {$/;"	s	file:
cdns_pcie_db	Sg2042PcieLib/PcieInit.c	/^STATIC struct cdns_pcie_database cdns_pcie_db;$/;"	v	typeref:struct:cdns_pcie_database
cdns_pcie_detect_quiet_min_delay_set	Sg2042PcieLib/pcie-cadence.c	/^void cdns_pcie_detect_quiet_min_delay_set(struct cdns_pcie *pcie)$/;"	f
cdns_pcie_disable_phy	Sg2042PcieLib/pcie-cadence.c	/^void cdns_pcie_disable_phy(struct cdns_pcie *pcie)$/;"	f
cdns_pcie_enable_phy	Sg2042PcieLib/pcie-cadence.c	/^int cdns_pcie_enable_phy(struct cdns_pcie *pcie)$/;"	f
cdns_pcie_host_bar_config	Sg2042PcieLib/pcie-cadence-host.c	/^static int cdns_pcie_host_bar_config(struct cdns_pcie_rc *rc,$/;"	f	file:
cdns_pcie_host_bar_ib_config	Sg2042PcieLib/pcie-cadence-host.c	/^static int cdns_pcie_host_bar_ib_config(struct cdns_pcie_rc *rc,$/;"	f	file:
cdns_pcie_host_dma_ranges_cmp	Sg2042PcieLib/pcie-cadence-host.c	/^static int cdns_pcie_host_dma_ranges_cmp(void *priv, const struct list_head *a,$/;"	f	file:
cdns_pcie_host_enable_ptm_response	Sg2042PcieLib/pcie-cadence-host.c	/^static void cdns_pcie_host_enable_ptm_response(struct cdns_pcie *pcie)$/;"	f	file:
cdns_pcie_host_find_max_bar	Sg2042PcieLib/pcie-cadence-host.c	/^cdns_pcie_host_find_max_bar(struct cdns_pcie_rc *rc, u64 size)$/;"	f	file:
cdns_pcie_host_find_min_bar	Sg2042PcieLib/pcie-cadence-host.c	/^cdns_pcie_host_find_min_bar(struct cdns_pcie_rc *rc, u64 size)$/;"	f	file:
cdns_pcie_host_init	Sg2042PcieLib/pcie-cadence-host.c	/^static int cdns_pcie_host_init(struct device *dev,$/;"	f	file:
cdns_pcie_host_init_address_translation	Sg2042PcieLib/pcie-cadence-host.c	/^static int cdns_pcie_host_init_address_translation(struct cdns_pcie_rc *rc)$/;"	f	file:
cdns_pcie_host_init_root_port	Sg2042PcieLib/pcie-cadence-host.c	/^static int cdns_pcie_host_init_root_port(struct cdns_pcie_rc *rc)$/;"	f	file:
cdns_pcie_host_map_dma_ranges	Sg2042PcieLib/pcie-cadence-host.c	/^static int cdns_pcie_host_map_dma_ranges(struct cdns_pcie_rc *rc)$/;"	f	file:
cdns_pcie_host_ops	Sg2042PcieLib/pcie-cadence-host.c	/^static struct pci_ops cdns_pcie_host_ops = {$/;"	v	typeref:struct:pci_ops	file:
cdns_pcie_host_setup	Sg2042PcieLib/pcie-cadence-host.c	/^int cdns_pcie_host_setup(struct cdns_pcie_rc *rc)$/;"	f
cdns_pcie_host_start_link	Sg2042PcieLib/pcie-cadence-host.c	/^static int cdns_pcie_host_start_link(struct cdns_pcie_rc *rc)$/;"	f	file:
cdns_pcie_host_wait_for_link	Sg2042PcieLib/pcie-cadence-host.c	/^static int cdns_pcie_host_wait_for_link(struct cdns_pcie *pcie)$/;"	f	file:
cdns_pcie_init_phy	Sg2042PcieLib/pcie-cadence.c	/^int cdns_pcie_init_phy(struct device *dev, struct cdns_pcie *pcie)$/;"	f
cdns_pcie_pm_ops	Sg2042PcieLib/pcie-cadence.c	/^const struct dev_pm_ops cdns_pcie_pm_ops = {$/;"	v	typeref:struct:dev_pm_ops
cdns_pcie_reset_outbound_region	Sg2042PcieLib/pcie-cadence.c	/^void cdns_pcie_reset_outbound_region(struct cdns_pcie *pcie, u32 r)$/;"	f
cdns_pcie_resume_noirq	Sg2042PcieLib/pcie-cadence.c	/^static int cdns_pcie_resume_noirq(struct device *dev)$/;"	f	file:
cdns_pcie_retrain	Sg2042PcieLib/pcie-cadence-host.c	/^static int cdns_pcie_retrain(struct cdns_pcie *pcie)$/;"	f	file:
cdns_pcie_rp_readl	Sg2042PcieLib/PcieInit.c	/^static inline UINT32 cdns_pcie_rp_readl(UINT32 base, UINT32 reg)$/;"	f	file:
cdns_pcie_rp_writel	Sg2042PcieLib/PcieInit.c	/^static inline VOID cdns_pcie_rp_writel(UINT32 base, UINT32 reg, UINT32 Value)$/;"	f	file:
cdns_pcie_set_outbound_region	Sg2042PcieLib/pcie-cadence.c	/^void cdns_pcie_set_outbound_region(struct cdns_pcie *pcie, u8 busnr, u8 fn,$/;"	f
cdns_pcie_set_outbound_region_for_normal_msg	Sg2042PcieLib/pcie-cadence.c	/^void cdns_pcie_set_outbound_region_for_normal_msg(struct cdns_pcie *pcie,$/;"	f
cdns_pcie_suspend_noirq	Sg2042PcieLib/pcie-cadence.c	/^static int cdns_pcie_suspend_noirq(struct device *dev)$/;"	f	file:
cfg_base	Sg2042PcieLib/PcieInit.c	/^	VOID __iomem		*cfg_base;$/;"	m	struct:cdns_mango_pcie_rc	file:
cfg_res	Sg2042PcieLib/PcieInit.c	/^	struct resource		*cfg_res;$/;"	m	struct:cdns_mango_pcie_rc	typeref:struct:cdns_mango_pcie_rc::resource	file:
dev	Sg2042PcieLib/PcieInit.c	/^	struct device		*dev;$/;"	m	struct:cdns_mango_pcie_rc	typeref:struct:cdns_mango_pcie_rc::device	file:
device_id	Sg2042PcieLib/PcieInit.c	/^	u16			device_id;$/;"	m	struct:cdns_mango_pcie_rc	file:
irq_domain	Sg2042PcieLib/PcieInit.c	/^	struct irq_domain	*irq_domain;$/;"	m	struct:cdns_mango_pcie_rc	typeref:struct:cdns_mango_pcie_rc::irq_domain	file:
irq_mask	Sg2042PcieLib/PcieInit.c	/^	UINT32			irq_mask[MAX_MSI_CTRLS];$/;"	m	struct:cdns_mango_pcie_rc	file:
link_id	Sg2042PcieLib/PcieInit.c	/^	u16			link_id;$/;"	m	struct:cdns_mango_pcie_rc	file:
lock	Sg2042PcieLib/PcieInit.c	/^	raw_spinlock_t		lock;$/;"	m	struct:cdns_mango_pcie_rc	file:
mEfiPciRootBridgeDevicePath	PciHostBridgeLib/PciHostBridgeLib.c	/^STATIC EFI_PCI_ROOT_BRIDGE_DEVICE_PATH mEfiPciRootBridgeDevicePath[] = {$/;"	v
mPciHostBridgeLibAcpiAddressSpaceTypeStr	PciHostBridgeLib/PciHostBridgeLib.c	/^STATIC CONST CHAR16 mPciHostBridgeLibAcpiAddressSpaceTypeStr[] = {$/;"	v
mRootBridgeTemplate	PciHostBridgeLib/PciHostBridgeLib.c	/^STATIC PCI_ROOT_BRIDGE mRootBridgeTemplate = {$/;"	v
mRootBridges	PciHostBridgeLib/PciHostBridgeLib.c	/^STATIC PCI_ROOT_BRIDGE mRootBridges[] = {$/;"	v
max_regions	Sg2042PcieLib/PcieInit.c	/^	UINT32			max_regions;$/;"	m	struct:cdns_mango_pcie_rc	file:
msi_data	Sg2042PcieLib/PcieInit.c	/^	dma_addr_t		msi_data;$/;"	m	struct:cdns_mango_pcie_rc	file:
msi_domain	Sg2042PcieLib/PcieInit.c	/^	struct irq_domain	*msi_domain;$/;"	m	struct:cdns_mango_pcie_rc	typeref:struct:cdns_mango_pcie_rc::irq_domain	file:
msi_irq	Sg2042PcieLib/PcieInit.c	/^	int			msi_irq;$/;"	m	struct:cdns_mango_pcie_rc	file:
msi_irq_chip	Sg2042PcieLib/PcieInit.c	/^	struct irq_chip		*msi_irq_chip;$/;"	m	struct:cdns_mango_pcie_rc	typeref:struct:cdns_mango_pcie_rc::irq_chip	file:
msi_page	Sg2042PcieLib/PcieInit.c	/^	VOID			*msi_page;$/;"	m	struct:cdns_mango_pcie_rc	file:
no_bar_nbits	Sg2042PcieLib/PcieInit.c	/^	UINT32			no_bar_nbits;$/;"	m	struct:cdns_mango_pcie_rc	file:
num_applied_vecs	Sg2042PcieLib/PcieInit.c	/^	UINT32			num_applied_vecs;$/;"	m	struct:cdns_mango_pcie_rc	file:
num_vectors	Sg2042PcieLib/PcieInit.c	/^	UINT32			num_vectors;$/;"	m	struct:cdns_mango_pcie_rc	file:
pcie	Sg2042PcieLib/PcieInit.c	/^	struct cdns_pcie	pcie;$/;"	m	struct:cdns_mango_pcie_rc	typeref:struct:cdns_mango_pcie_rc::cdns_pcie	file:
pcie_id	Sg2042PcieLib/PcieInit.c	/^	u16			pcie_id;$/;"	m	struct:cdns_mango_pcie_rc	file:
pcie_reg_base	Sg2042PcieLib/PcieInit.c	/^	VOID __iomem *pcie_reg_base;$/;"	m	struct:cdns_pcie_database	file:
root_bus	Sg2042PcieLib/PcieInit.c	/^	struct pci_bus		*root_bus;$/;"	m	struct:cdns_mango_pcie_rc	typeref:struct:cdns_mango_pcie_rc::pci_bus	file:
top_intc_used	Sg2042PcieLib/PcieInit.c	/^	UINT32			top_intc_used;$/;"	m	struct:cdns_mango_pcie_rc	file:
vendor_id	Sg2042PcieLib/PcieInit.c	/^	u16			vendor_id;$/;"	m	struct:cdns_mango_pcie_rc	file:
